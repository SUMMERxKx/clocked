// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id          String   @id @default(uuid())
  handle      String   @unique @db.VarChar(50)
  email       String   @unique
  photoUrl    String?  @map("photo_url")
  createdAt   DateTime @default(now()) @map("created_at")
  privacyMode Boolean  @default(false) @map("privacy_mode")
  
  // Relations
  ownedGroups    Group[]       @relation("GroupOwner")
  groupMembers   GroupMember[]
  sessions       Session[]
  reactions      Reaction[]
  auditLogs      AuditLog[]    @relation("AuditActor")
  notifications  Notification[]
  streaks        Streak[]
  refreshTokens  RefreshToken[]
  
  @@map("users")
}

// Group model
model Group {
  id         String           @id @default(uuid())
  name       String           @db.VarChar(100)
  icon       String?          @db.VarChar(10)
  visibility GroupVisibility  @default(PRIVATE)
  ownerId    String           @map("owner_id")
  createdAt  DateTime         @default(now()) @map("created_at")
  
  // Relations
  owner       User           @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     GroupMember[]
  sessions    Session[]
  events      Event[]
  auditLogs   AuditLog[]
  inviteTokens InviteToken[]
  
  @@map("groups")
}

enum GroupVisibility {
  PRIVATE
  PUBLIC
}

// Group member model
model GroupMember {
  groupId  String   @map("group_id")
  userId   String   @map("user_id")
  role     UserRole @default(MEMBER)
  joinedAt DateTime @default(now()) @map("joined_at")
  
  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([groupId, userId])
  @@map("group_members")
}

enum UserRole {
  OWNER
  ADMIN
  MEMBER
}

// Session model
model Session {
  id            String             @id @default(uuid())
  userId        String             @map("user_id")
  groupId       String             @map("group_id")
  category      SessionCategory
  startTs       DateTime           @map("start_ts")
  endTs         DateTime?          @map("end_ts")
  targetMin     Int                @map("target_min")
  locationCoarse String?           @map("location_coarse") @db.VarChar(100)
  note          String?            @db.VarChar(500)
  visibility    SessionVisibility  @default(PUBLIC)
  
  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  reactions Reaction[]
  
  @@map("sessions")
}

enum SessionCategory {
  WORK
  STUDY
  EXERCISE
  HOBBY
  SOCIAL
  OTHER
}

enum SessionVisibility {
  PUBLIC
  FRIENDS
  PRIVATE
}

// Reaction model
model Reaction {
  id        String       @id @default(uuid())
  sessionId String       @map("session_id")
  userId    String       @map("user_id")
  type      ReactionType
  ts        DateTime     @default(now())
  
  // Relations
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([sessionId, userId, type])
  @@map("reactions")
}

enum ReactionType {
  LIKE
  JOIN
  ENCOURAGE
}

// Event model
model Event {
  id           String  @id @default(uuid())
  groupId      String  @map("group_id")
  title        String  @db.VarChar(200)
  startTs      DateTime @map("start_ts")
  durationMin  Int     @map("duration_min")
  autoClockIn  Boolean @default(false) @map("auto_clock_in")
  
  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@map("events")
}

// Audit log model
model AuditLog {
  id          String      @id @default(uuid())
  actorId     String      @map("actor_id")
  action      AuditAction
  subjectType String      @map("subject_type") @db.VarChar(50)
  subjectId   String      @map("subject_id")
  ts          DateTime    @default(now())
  metaJson    Json?       @map("meta_json")
  
  // Relations
  actor User @relation("AuditActor", fields: [actorId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@map("audit_logs")
}

enum AuditAction {
  USER_CREATED
  USER_UPDATED
  GROUP_CREATED
  GROUP_UPDATED
  GROUP_DELETED
  MEMBER_ADDED
  MEMBER_REMOVED
  MEMBER_ROLE_CHANGED
  SESSION_STARTED
  SESSION_ENDED
  SESSION_UPDATED
  REACTION_ADDED
  REACTION_REMOVED
  EVENT_CREATED
  EVENT_UPDATED
  EVENT_DELETED
  AUTH_LOGIN
  AUTH_LOGOUT
  AUTH_TOKEN_REFRESH
  AUTH_TOKEN_REVOKED
}

// Notification model
model Notification {
  id        String           @id @default(uuid())
  userId    String           @map("user_id")
  type      NotificationType
  title     String           @db.VarChar(100)
  body      String           @db.VarChar(500)
  data      Json?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now()) @map("created_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

enum NotificationType {
  SESSION_STARTED
  SESSION_ENDED
  FRIEND_JOINED
  GOAL_ACHIEVED
  GOAL_MISSED
  SAFETY_TIMEOUT
  GROUP_INVITE
}

// Streak model
model Streak {
  id               String         @id @default(uuid())
  userId           String         @map("user_id")
  category         SessionCategory
  currentStreak    Int            @map("current_streak")
  longestStreak    Int            @map("longest_streak")
  lastActivityDate DateTime?      @map("last_activity_date")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, category])
  @@map("streaks")
}

// Invite token model
model InviteToken {
  id        String   @id @default(uuid())
  token     String   @unique
  groupId   String   @map("group_id")
  expiresAt DateTime @map("expires_at")
  maxUses   Int?     @map("max_uses")
  usedCount Int      @default(0) @map("used_count")
  
  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@map("invite_tokens")
}

// Refresh token model for JWT rotation
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  revoked   Boolean  @default(false)
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

// Magic link model for passwordless auth
model MagicLink {
  id        String   @id @default(uuid())
  token     String   @unique
  email     String
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  
  @@map("magic_links")
}
